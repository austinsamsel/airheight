function dataTests(t){function a(){var t=0;for(var a in jQuery.cache)++t;return t}var e,r,o,d,n;equal(jQuery.data(t,"foo"),void 0,"No data exists initially"),strictEqual(jQuery.hasData(t),!1,"jQuery.hasData agrees no data exists initially"),r=jQuery.data(t),equal(typeof r,"object","Calling data with no args gives us a data object reference"),strictEqual(jQuery.data(t),r,"Calling jQuery.data returns the same data object when called multiple times"),strictEqual(jQuery.hasData(t),!1,"jQuery.hasData agrees no data exists even when an empty data obj exists"),r.foo="bar",equal(jQuery.data(t,"foo"),"bar","Data is readable by jQuery.data when set directly on a returned data object"),strictEqual(jQuery.hasData(t),!0,"jQuery.hasData agrees data exists when data exists"),jQuery.data(t,"foo","baz"),equal(jQuery.data(t,"foo"),"baz","Data can be changed by jQuery.data"),equal(r.foo,"baz","Changes made through jQuery.data propagate to referenced data object"),jQuery.data(t,"foo",void 0),equal(jQuery.data(t,"foo"),"baz","Data is not unset by passing undefined to jQuery.data"),jQuery.data(t,"foo",null),strictEqual(jQuery.data(t,"foo"),null,"Setting null using jQuery.data works OK"),jQuery.data(t,"foo","foo1"),jQuery.data(t,{bar:"baz",boom:"bloz"}),strictEqual(jQuery.data(t,"foo"),"foo1","Passing an object extends the data object instead of replacing it"),equal(jQuery.data(t,"boom"),"bloz","Extending the data object works"),jQuery._data(t,"foo","foo2"),equal(jQuery._data(t,"foo"),"foo2","Setting internal data works"),equal(jQuery.data(t,"foo"),"foo1","Setting internal data does not override user data"),o=jQuery._data(t),ok(o,"Internal data object exists"),notStrictEqual(r,o,"Internal data object is not the same as user data object"),strictEqual(t.boom,void 0,"Data is never stored directly on the object"),jQuery.removeData(t,"foo"),strictEqual(jQuery.data(t,"foo"),void 0,"jQuery.removeData removes single properties"),jQuery.removeData(t),strictEqual(jQuery._data(t),o,"jQuery.removeData does not remove internal data if it exists"),jQuery.removeData(t,void 0,!0),strictEqual(jQuery.data(t,jQuery.expando),void 0,"jQuery.removeData on internal data works"),strictEqual(jQuery.hasData(t),!1,"jQuery.hasData agrees all data has been removed from object"),jQuery._data(t,"foo","foo2"),strictEqual(jQuery.hasData(t),!0,"jQuery.hasData shows data exists even if it is only internal data"),jQuery.data(t,"foo","foo1"),equal(jQuery._data(t,"foo"),"foo2","Setting user data does not override internal data"),jQuery.removeData(t,"foo",!0),t.nodeType?(e=a(),jQuery.removeData(t,"foo"),equal(a(),e-1,"Removing the last item in the data object destroys it")):(jQuery.removeData(t,"foo"),jQuery.support.deleteExpando?(d=!1,n=jQuery.expando in t):(d=null,n=t[jQuery.expando]),equal(n,d,"Removing the last item in the data object destroys it")),jQuery.data(t,"foo","foo1"),jQuery._data(t,"foo","foo2"),equal(jQuery.data(t,"foo"),"foo1","(sanity check) Ensure data is set in user data object"),equal(jQuery._data(t,"foo"),"foo2","(sanity check) Ensure data is set in internal data object"),jQuery.removeData(t,"foo",!0),strictEqual(jQuery.data(t,jQuery.expando),void 0,"Removing the last item in internal data destroys the internal data object"),jQuery._data(t,"foo","foo2"),equal(jQuery._data(t,"foo"),"foo2","(sanity check) Ensure data is set in internal data object"),jQuery.removeData(t,"foo"),equal(jQuery._data(t,"foo"),"foo2","(sanity check) jQuery.removeData for user data does not remove internal data"),t.nodeType?(e=a(),jQuery.removeData(t,"foo",!0),equal(a(),e-1,"Removing the last item in the internal data object also destroys the user data object when it is empty")):(jQuery.removeData(t,"foo",!0),jQuery.support.deleteExpando?(d=!1,n=jQuery.expando in t):(d=null,n=t[jQuery.expando]),equal(n,d,"Removing the last item in the internal data object also destroys the user data object when it is empty"))}module("data",{teardown:moduleTeardown}),test("expando",function(){expect(1),equal(void 0!==jQuery.expando,!0,"jQuery is exposing the expando")}),test("jQuery.data",function(){expect(124);var t=document.createElement("div");dataTests(t),dataTests({}),jQuery(window).unbind("unload"),dataTests(window),dataTests(document),jQuery(t).remove()}),test("jQuery.acceptData",function(){expect(7),ok(jQuery.acceptData(document),"document"),ok(jQuery.acceptData(document.documentElement),"documentElement"),ok(jQuery.acceptData({}),"object"),ok(!jQuery.acceptData(document.createElement("embed")),"embed"),ok(!jQuery.acceptData(document.createElement("applet")),"applet");var t=document.createElement("object");t.setAttribute("classid","clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"),ok(jQuery.acceptData(t),"flash");var a=document.createElement("object");a.setAttribute("classid","clsid:8AD9C840-044E-11D1-B3E9-00805F499D93"),ok(!jQuery.acceptData(a),"applet")}),test(".data()",function(){expect(5);var t=jQuery("#foo");strictEqual(t.data("foo"),void 0,"Make sure that missing result is undefined"),t.data("test","success");var a=t.data();deepEqual(a,{test:"success"},"data() get the entire data object"),strictEqual(t.data("foo"),void 0,"Make sure that missing result is still undefined");var e=jQuery("#unfound");equal(e.data(),null,"data() on empty set returns null");var r={foo:"bar"};jQuery(r).data("foo","baz"),a=jQuery.extend(!0,{},jQuery(r).data()),deepEqual(a,{foo:"baz"},"Retrieve data object from a wrapped JS object (#7524)")}),test(".data(String) and .data(String, Object)",function(){function t(t,a,e){var r=a;t.namespace&&(r=r+"."+t.namespace),d[a]+=e,d.value=jQuery.data(t.target,r)}expect(29);var a=jQuery("<div><div></div></div>"),e=a.children();a.bind("getData",function(){ok(!1,"getData bubbled.")}).bind("setData",function(){ok(!1,"setData bubbled.")}).bind("changeData",function(){ok(!1,"changeData bubbled.")}),ok(void 0===e.data("test"),"Check for no data exists"),e.data("test","success"),equal(e.data("test"),"success","Check for added data"),e.data("test","overwritten"),equal(e.data("test"),"overwritten","Check for overwritten data"),equal(e.data("test",void 0).data("test"),"overwritten","Check that .data('key',undefined) does nothing but is chainable (#5571)"),e.data("test",null),ok(null===e.data("test"),"Check for null data"),ok(void 0===e.data("notexist"),"Check for no data exists"),e.data("test","overwritten");var r={test:0},o={test:0},d={test:0,value:null};e.bind("setData",function(t,a,e){r[a]+=e}).bind("setData.foo",function(t,a,e){r[a]+=e}).bind("changeData",t).bind("changeData.foo",t).bind("getData",function(t,a){o[a]+=1}).bind("getData.foo",function(t,a){o[a]+=3}),e.data("test.foo",2),equal(e.data("test"),"overwritten","Check for original data"),equal(e.data("test.foo"),2,"Check for namespaced data"),equal(e.data("test.bar"),"overwritten","Check for unmatched namespace"),equal(r.test,2,"Check triggered setter functions"),equal(o.test,5,"Check triggered getter functions"),equal(d.test,2,"Check sets raise changeData"),equal(d.value,2,"Check changeData after data has been set"),r.test=0,o.test=0,d.test=0,d.value=null,e.data("test",1),equal(e.data("test"),1,"Check for original data"),equal(e.data("test.foo"),2,"Check for namespaced data"),equal(e.data("test.bar"),1,"Check for unmatched namespace"),equal(r.test,1,"Check triggered setter functions"),equal(o.test,5,"Check triggered getter functions"),equal(d.test,1,"Check sets raise changeData"),equal(d.value,1,"Check changeData after data has been set"),e.bind("getData",function(t,a){return a+"root"}).bind("getData.foo",function(t,a){return a+"foo"}),equal(e.data("test"),"testroot","Check for original data"),equal(e.data("test.foo"),"testfoo","Check for namespaced data"),equal(e.data("test.bar"),"testroot","Check for unmatched namespace");var n=jQuery({exists:!0});equal(n.data("nothing"),void 0,"Non-existent data returns undefined"),equal(n.data("null",null).data("null"),null,"null's are preserved"),equal(n.data("emptyString","").data("emptyString"),"","Empty strings are preserved"),equal(n.data("false",!1).data("false"),!1,"false's are preserved"),equal(n.data("exists"),void 0,"Existing data is not returned"),n.removeData(),deepEqual(n[0],{exists:!0},"removeData does not clear the object"),a.remove()}),test("data-* attributes",function(){function t(t,a){switch(t){case 0:equal(jQuery(a).data("foo"),"bar","Check foo property"),equal(jQuery(a).data("bar"),"baz","Check baz property");break;case 1:equal(jQuery(a).data("test"),"bar","Check test property"),equal(jQuery(a).data("bar"),"baz","Check bar property");break;case 2:equal(jQuery(a).data("zoooo"),"bar","Check zoooo property"),deepEqual(jQuery(a).data("bar"),{test:"baz"},"Check bar property");break;case 3:equal(jQuery(a).data("number"),!0,"Check number property"),deepEqual(jQuery(a).data("stuff"),[2,8],"Check stuff property");break;default:ok(!1,["Assertion failed on index ",t,", with data"].join(""))}}expect(40);var a=jQuery("<div>"),e=jQuery("<div data-myobj='old data' data-ignored=\"DOM\" data-other='test'></div>"),r=jQuery("<div data-myobj='old data' data-ignored=\"DOM\" data-other='test'></div>");equal(a.data("attr"),void 0,"Check for non-existing data-attr attribute"),a.attr("data-attr","exists"),equal(a.data("attr"),"exists","Check for existing data-attr attribute"),a.attr("data-attr","exists2"),equal(a.data("attr"),"exists","Check that updates to data- don't update .data()"),a.data("attr","internal").attr("data-attr","external"),equal(a.data("attr"),"internal","Check for .data('attr') precedence (internal > external data-* attribute)"),a.remove(),e.appendTo("#qunit-fixture"),equal(e.data("myobj"),"old data","Value accessed from data-* attribute"),e.data("myobj","replaced"),equal(e.data("myobj"),"replaced","Original data overwritten"),e.data("ignored","cache"),equal(e.data("ignored"),"cache","Cached data used before DOM data-* fallback");var o,d=e.data(),n=r.data(),s=["myobj","ignored","other"],i=0,u=0;r.remove();for(var l=0,c=s.length;c>l;l++)ok(d[s[l]],"Make sure data- property exists when calling data-."),ok(n[s[l]],"Make sure data- property exists when calling data-.");for(o in d)i++;equal(i,s.length,"Make sure that the right number of properties came through.");for(o in n)u++;equal(u,s.length,"Make sure that the right number of properties came through."),e.attr("data-other","newvalue"),equal(e.data("other"),"test","Make sure value was pulled in properly from a .data()."),e.attr("data-true","true").attr("data-false","false").attr("data-five","5").attr("data-point","5.5").attr("data-pointe","5.5E3").attr("data-grande","5.574E9").attr("data-hexadecimal","0x42").attr("data-pointbad","5..5").attr("data-pointbad2","-.").attr("data-bigassnum","123456789123456789123456789").attr("data-badjson","{123}").attr("data-badjson2","[abc]").attr("data-empty","").attr("data-space"," ").attr("data-null","null").attr("data-string","test"),strictEqual(e.data("true"),!0,"Primitive true read from attribute"),strictEqual(e.data("false"),!1,"Primitive false read from attribute"),strictEqual(e.data("five"),5,"Primitive number read from attribute"),strictEqual(e.data("point"),5.5,"Primitive number read from attribute"),strictEqual(e.data("pointe"),"5.5E3","Floating point exponential number read from attribute"),strictEqual(e.data("grande"),"5.574E9","Big exponential number read from attribute"),strictEqual(e.data("hexadecimal"),"0x42","Hexadecimal number read from attribute"),strictEqual(e.data("pointbad"),"5..5","Bad number read from attribute"),strictEqual(e.data("pointbad2"),"-.","Bad number read from attribute"),strictEqual(e.data("bigassnum"),"123456789123456789123456789","Bad bigass number read from attribute"),strictEqual(e.data("badjson"),"{123}","Bad number read from attribute"),strictEqual(e.data("badjson2"),"[abc]","Bad number read from attribute"),strictEqual(e.data("empty"),"","Empty string read from attribute"),strictEqual(e.data("space")," ","Empty string read from attribute"),strictEqual(e.data("null"),null,"Primitive null read from attribute"),strictEqual(e.data("string"),"test","Typical string read from attribute"),e.remove();var f="<ol><li class='test test2' data-foo='bar' data-bar='baz' data-arr='[1,2]'>Some stuff</li><li class='test test2' data-test='bar' data-bar='baz'>Some stuff</li><li class='test test2' data-zoooo='bar' data-bar='{\"test\":\"baz\"}'>Some stuff</li><li class='test test2' data-number=true data-stuff='[2,8]'>Some stuff</li></ol>",y=jQuery(f).appendTo("#qunit-fixture");y.find("li").each(t),y.remove()}),test(".data(Object)",function(){expect(4);var t=jQuery("<div/>");t.data({test:"in",test2:"in2"}),equal(t.data("test"),"in","Verify setting an object in data"),equal(t.data("test2"),"in2","Verify setting an object in data");var a={test:"unset"},e=jQuery(a);e.data("test","unset"),e.data({test:"in",test2:"in2"}),equal(jQuery.data(a).test,"in","Verify setting an object on an object extends the data object"),equal(a.test2,void 0,"Verify setting an object on an object does not extend the object"),t.remove()}),test("jQuery.removeData",function(){expect(10);var t=jQuery("#foo")[0];jQuery.data(t,"test","testing"),jQuery.removeData(t,"test"),equal(jQuery.data(t,"test"),void 0,"Check removal of data"),jQuery.data(t,"test2","testing"),jQuery.removeData(t),ok(!jQuery.data(t,"test2"),"Make sure that the data property no longer exists."),ok(!t[jQuery.expando],"Make sure the expando no longer exists, as well."),jQuery.data(t,{test3:"testing",test4:"testing"}),jQuery.removeData(t,"test3 test4"),ok(!jQuery.data(t,"test3")||jQuery.data(t,"test4"),"Multiple delete with spaces."),jQuery.data(t,{test3:"testing",test4:"testing"}),jQuery.removeData(t,["test3","test4"]),ok(!jQuery.data(t,"test3")||jQuery.data(t,"test4"),"Multiple delete by array."),jQuery.data(t,{"test3 test4":"testing",test3:"testing"}),jQuery.removeData(t,"test3 test4"),ok(!jQuery.data(t,"test3 test4"),"Multiple delete with spaces deleted key with exact name"),ok(jQuery.data(t,"test3"),"Left the partial matched key alone");var a={};jQuery.data(a,"test","testing"),equal(jQuery(a).data("test"),"testing","verify data on plain object"),jQuery.removeData(a,"test"),equal(jQuery.data(a,"test"),void 0,"Check removal of data on plain object"),jQuery.data(window,"BAD",!0),jQuery.removeData(window,"BAD"),ok(!jQuery.data(window,"BAD"),"Make sure that the value was not still set.")}),test(".removeData()",function(){expect(6);var t=jQuery("#foo");t.data("test","testing"),t.removeData("test"),equal(t.data("test"),void 0,"Check removal of data"),t.data("test","testing"),t.data("test.foo","testing2"),t.removeData("test.bar"),equal(t.data("test.foo"),"testing2","Make sure data is intact"),equal(t.data("test"),"testing","Make sure data is intact"),t.removeData("test"),equal(t.data("test.foo"),"testing2","Make sure data is intact"),equal(t.data("test"),void 0,"Make sure data is intact"),t.removeData("test.foo"),equal(t.data("test.foo"),void 0,"Make sure data is intact")}),window.JSON&&window.JSON.stringify&&test("JSON serialization (#8108)",function(){expect(1);var t={foo:"bar"};jQuery.data(t,"hidden",!0),equal(JSON.stringify(t),'{"foo":"bar"}',"Expando is hidden from JSON.stringify")}),test("jQuery.data should follow html5 specification regarding camel casing",function(){expect(10);var t=jQuery("<div id='myObject' data-w-t-f='ftw' data-big-a-little-a='bouncing-b' data-foo='a' data-foo-bar='b' data-foo-bar-baz='c'></div>").prependTo("body");equal(t.data().wTF,"ftw","Verify single letter data-* key"),equal(t.data().bigALittleA,"bouncing-b","Verify single letter mixed data-* key"),equal(t.data().foo,"a","Verify single word data-* key"),equal(t.data().fooBar,"b","Verify multiple word data-* key"),equal(t.data().fooBarBaz,"c","Verify multiple word data-* key"),equal(t.data("foo"),"a","Verify single word data-* key"),equal(t.data("fooBar"),"b","Verify multiple word data-* key"),equal(t.data("fooBarBaz"),"c","Verify multiple word data-* key"),t.data("foo-bar","d"),equal(t.data("fooBar"),"d","Verify updated data-* key"),equal(t.data("foo-bar"),"d","Verify updated data-* key"),t.remove()}),test("jQuery.data should not miss data with preset hyphenated property names",function(){expect(2);var t=jQuery("<div/>",{id:"hyphened"}).appendTo("#qunit-fixture"),a={camelBar:"camelBar","hyphen-foo":"hyphen-foo"};t.data(a),jQuery.each(a,function(a,e){equal(t.data(e),e,"data with property '"+e+"' was correctly found")})}),test("jQuery.data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values",function(){var t=jQuery("<div/>",{id:"hyphened"}).appendTo("#qunit-fixture"),a={"non-empty":"a string","empty-string":"","one-value":1,"zero-value":0,"an-array":[],"an-object":{},"bool-true":!0,"bool-false":!1,"some-json":'{ "foo": "bar" }',"num-1-middle":!0,"num-end-2":!0,"2-num-start":!0};expect(24),jQuery.each(a,function(a,e){t.data(a,e),deepEqual(t.data(a),e,"get: "+a),deepEqual(t.data(jQuery.camelCase(a)),e,"get: "+jQuery.camelCase(a))})}),test("jQuery.data supports interoperable removal of hyphenated/camelCase properties",function(){var t=jQuery("<div/>",{id:"hyphened"}).appendTo("#qunit-fixture"),a={"non-empty":"a string","empty-string":"","one-value":1,"zero-value":0,"an-array":[],"an-object":{},"bool-true":!0,"bool-false":!1,"some-json":'{ "foo": "bar" }'};expect(27),jQuery.each(a,function(a,e){t.data(a,e),deepEqual(t.data(a),e,"get: "+a),deepEqual(t.data(jQuery.camelCase(a)),e,"get: "+jQuery.camelCase(a)),t.removeData(a),equal(t.data(a),void 0,"get: "+a)})}),test("Triggering the removeData should not throw exceptions. (#10080)",function(){expect(1),stop();var t=jQuery("#loadediframe");jQuery(t[0].contentWindow).bind("unload",function(){ok(!0,"called unload"),start()}),t.attr("src","data/iframe.html?param=true")}),test("Only check element attributes once when calling .data() - #8909",function(){expect(2);var t={test:"testing",test2:"testing"},a=jQuery("<div data-test='testing'>"),e=a[0];e.setAttribute("data-test2","testing"),deepEqual(a.data(),t,"Sanity Check"),e.setAttribute("data-test3","testing"),deepEqual(a.data(),t,"The data didn't change even though the data-* attrs did"),a.remove()}),test("JSON data- attributes can have newlines",function(){expect(1);var t=jQuery('<div data-some=\'{\n"foo":\n	"bar"\n}\'></div>');equal(t.data("some").foo,"bar","got a JSON data- attribute with spaces"),t.remove()});