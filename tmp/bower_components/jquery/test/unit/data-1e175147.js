function dataTests(t){var a,e;equal(jQuery.data(t,"foo"),void 0,"No data exists initially"),strictEqual(jQuery.hasData(t),!1,"jQuery.hasData agrees no data exists initially"),a=jQuery.data(t),equal(typeof a,"object","Calling data with no args gives us a data object reference"),strictEqual(jQuery.data(t),a,"Calling jQuery.data returns the same data object when called multiple times"),strictEqual(jQuery.hasData(t),!1,"jQuery.hasData agrees no data exists even when an empty data obj exists"),a.foo="bar",equal(jQuery.data(t,"foo"),"bar","Data is readable by jQuery.data when set directly on a returned data object"),strictEqual(jQuery.hasData(t),!0,"jQuery.hasData agrees data exists when data exists"),jQuery.data(t,"foo","baz"),equal(jQuery.data(t,"foo"),"baz","Data can be changed by jQuery.data"),equal(a.foo,"baz","Changes made through jQuery.data propagate to referenced data object"),jQuery.data(t,"foo",void 0),equal(jQuery.data(t,"foo"),"baz","Data is not unset by passing undefined to jQuery.data"),jQuery.data(t,"foo",null),strictEqual(jQuery.data(t,"foo"),null,"Setting null using jQuery.data works OK"),jQuery.data(t,"foo","foo1"),jQuery.data(t,{bar:"baz",boom:"bloz"}),strictEqual(jQuery.data(t,"foo"),"foo1","Passing an object extends the data object instead of replacing it"),equal(jQuery.data(t,"boom"),"bloz","Extending the data object works"),jQuery._data(t,"foo","foo2",!0),equal(jQuery._data(t,"foo"),"foo2","Setting internal data works"),equal(jQuery.data(t,"foo"),"foo1","Setting internal data does not override user data"),e=jQuery._data(t),ok(e,"Internal data object exists"),notStrictEqual(a,e,"Internal data object is not the same as user data object"),strictEqual(t.boom,void 0,"Data is never stored directly on the object"),jQuery.removeData(t,"foo"),strictEqual(jQuery.data(t,"foo"),void 0,"jQuery.removeData removes single properties"),jQuery.removeData(t),strictEqual(jQuery._data(t),e,"jQuery.removeData does not remove internal data if it exists"),jQuery.data(t,"foo","foo1"),jQuery._data(t,"foo","foo2"),equal(jQuery.data(t,"foo"),"foo1","(sanity check) Ensure data is set in user data object"),equal(jQuery._data(t,"foo"),"foo2","(sanity check) Ensure data is set in internal data object"),strictEqual(jQuery._data(t,jQuery.expando),void 0,"Removing the last item in internal data destroys the internal data object"),jQuery._data(t,"foo","foo2"),equal(jQuery._data(t,"foo"),"foo2","(sanity check) Ensure data is set in internal data object"),jQuery.removeData(t,"foo"),equal(jQuery._data(t,"foo"),"foo2","(sanity check) jQuery.removeData for user data does not remove internal data")}function testDataTypes(t){jQuery.each({"null":null,"true":!0,"false":!1,zero:0,one:1,"empty string":"","empty array":[],array:[1],"empty object":{},object:{foo:"bar"},date:new Date,regex:/test/,"function":function(){}},function(a,e){strictEqual(t.data("test",e).data("test"),e,"Data set to "+a)})}module("data",{teardown:moduleTeardown}),test("expando",function(){expect(1),equal(void 0!==jQuery.expando,!0,"jQuery is exposing the expando")}),test("jQuery.data(div)",25,function(){var t=document.createElement("div");dataTests(t),QUnit.expectJqData(t,"foo")}),test("jQuery.data({})",25,function(){dataTests({})}),test("jQuery.data(window)",25,function(){jQuery(window).off("unload"),dataTests(window)}),test("jQuery.data(document)",25,function(){dataTests(document),QUnit.expectJqData(document,"foo")}),test("Expando cleanup",4,function(){function t(t){jQuery.support.deleteExpando?(a=!1,e=jQuery.expando in r):(a=null,e=r[jQuery.expando]),equal(e,a,t)}var a,e,r=document.createElement("div");t("There is no expando on new elements"),jQuery.data(r,"foo",100),jQuery.data(r,"bar",200),ok(jQuery.expando in r,"There is an expando on the element after using $.data()"),jQuery.removeData(r,"foo"),ok(jQuery.expando in r,"There is still an expando on the element after removing (some) of the data"),jQuery.removeData(r,"bar"),t("Removing the last item in the data store deletes the expando"),jQuery(r).remove()}),test("Data is not being set on comment and text nodes",function(){expect(2),ok(!jQuery.hasData(jQuery("<!-- comment -->").data("foo",0))),ok(!jQuery.hasData(jQuery("<span>text</span>").contents().data("foo",0)))}),test("jQuery.acceptData",function(){expect(9);var t,a;ok(jQuery.acceptData(document),"document"),ok(jQuery.acceptData(document.documentElement),"documentElement"),ok(jQuery.acceptData({}),"object"),ok(!jQuery.acceptData(document.createElement("embed")),"embed"),ok(!jQuery.acceptData(document.createElement("applet")),"applet"),t=document.createElement("object"),t.setAttribute("classid","clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"),ok(jQuery.acceptData(t),"flash"),a=document.createElement("object"),a.setAttribute("classid","clsid:8AD9C840-044E-11D1-B3E9-00805F499D93"),ok(!jQuery.acceptData(a),"applet"),ok(!jQuery.acceptData(document.createComment("")),"comment"),ok(!jQuery.acceptData(document.createTextNode("")),"text")}),test(".data()",function(){expect(5);var t,a,e,r;t=jQuery("#foo"),strictEqual(t.data("foo"),void 0,"Make sure that missing result is undefined"),t.data("test","success"),a=t.data(),deepEqual(a,{test:"success"},"data() returns entire data object with expected properties"),strictEqual(t.data("foo"),void 0,"Make sure that missing result is still undefined"),e=jQuery("#unfound"),equal(e.data(),null,"data() on empty set returns null"),r={foo:"bar"},jQuery(r).data("foo","baz"),a=jQuery.extend(!0,{},jQuery(r).data()),deepEqual(a,{foo:"baz"},"Retrieve data object from a wrapped JS object (#7524)")}),test("jQuery(Element).data(String, Object).data(String)",function(){expect(18);var t=jQuery("<div><div></div></div>"),a=t.children();strictEqual(a.data("test"),void 0,"No data exists initially"),strictEqual(a.data("test","success").data("test"),"success","Data added"),strictEqual(a.data("test","overwritten").data("test"),"overwritten","Data overwritten"),strictEqual(a.data("test",void 0).data("test"),"overwritten",".data(key,undefined) does nothing but is chainable (#5571)"),strictEqual(a.data("notexist"),void 0,"No data exists for unset key"),testDataTypes(a),t.remove()}),test("jQuery(plain Object).data(String, Object).data(String)",function(){expect(16);var t=jQuery({exists:!0});strictEqual(t.data("nothing"),void 0,"Non-existent data returns undefined"),strictEqual(t.data("exists"),void 0,"Object properties are not returned as data"),testDataTypes(t),t.removeData(),deepEqual(t[0],{exists:!0},"removeData does not clear the object")}),test("data-* attributes",function(){function t(t,a){switch(t){case 0:equal(jQuery(a).data("foo"),"bar","Check foo property"),equal(jQuery(a).data("bar"),"baz","Check baz property");break;case 1:equal(jQuery(a).data("test"),"bar","Check test property"),equal(jQuery(a).data("bar"),"baz","Check bar property");break;case 2:equal(jQuery(a).data("zoooo"),"bar","Check zoooo property"),deepEqual(jQuery(a).data("bar"),{test:"baz"},"Check bar property");break;case 3:equal(jQuery(a).data("number"),!0,"Check number property"),deepEqual(jQuery(a).data("stuff"),[2,8],"Check stuff property");break;default:ok(!1,["Assertion failed on index ",t,", with data"].join(""))}}expect(40);var a,e,r,o,d,n,i,s,u,l,c=jQuery("<div>"),y=jQuery("<div data-myobj='old data' data-ignored=\"DOM\" data-other='test'></div>"),f=jQuery("<div data-myobj='old data' data-ignored=\"DOM\" data-other='test'></div>");for(equal(c.data("attr"),void 0,"Check for non-existing data-attr attribute"),c.attr("data-attr","exists"),equal(c.data("attr"),"exists","Check for existing data-attr attribute"),c.attr("data-attr","exists2"),equal(c.data("attr"),"exists","Check that updates to data- don't update .data()"),c.data("attr","internal").attr("data-attr","external"),equal(c.data("attr"),"internal","Check for .data('attr') precedence (internal > external data-* attribute)"),c.remove(),y.appendTo("#qunit-fixture"),equal(y.data("myobj"),"old data","Value accessed from data-* attribute"),y.data("myobj","replaced"),equal(y.data("myobj"),"replaced","Original data overwritten"),y.data("ignored","cache"),equal(y.data("ignored"),"cache","Cached data used before DOM data-* fallback"),n=y.data(),i=f.data(),s=["myobj","ignored","other"],u=0,l=0,f.remove(),e=0,r=s.length;r>e;e++)ok(n[s[e]],"Make sure data- property exists when calling data-."),ok(i[s[e]],"Make sure data- property exists when calling data-.");for(a in n)u++;equal(u,s.length,"Make sure that the right number of properties came through.");for(a in i)l++;equal(l,s.length,"Make sure that the right number of properties came through."),y.attr("data-other","newvalue"),equal(y.data("other"),"test","Make sure value was pulled in properly from a .data()."),y.attr("data-true","true").attr("data-false","false").attr("data-five","5").attr("data-point","5.5").attr("data-pointe","5.5E3").attr("data-grande","5.574E9").attr("data-hexadecimal","0x42").attr("data-pointbad","5..5").attr("data-pointbad2","-.").attr("data-bigassnum","123456789123456789123456789").attr("data-badjson","{123}").attr("data-badjson2","[abc]").attr("data-empty","").attr("data-space"," ").attr("data-null","null").attr("data-string","test"),strictEqual(y.data("true"),!0,"Primitive true read from attribute"),strictEqual(y.data("false"),!1,"Primitive false read from attribute"),strictEqual(y.data("five"),5,"Primitive number read from attribute"),strictEqual(y.data("point"),5.5,"Primitive number read from attribute"),strictEqual(y.data("pointe"),"5.5E3","Floating point exponential number read from attribute"),strictEqual(y.data("grande"),"5.574E9","Big exponential number read from attribute"),strictEqual(y.data("hexadecimal"),"0x42","Hexadecimal number read from attribute"),strictEqual(y.data("pointbad"),"5..5","Bad number read from attribute"),strictEqual(y.data("pointbad2"),"-.","Bad number read from attribute"),strictEqual(y.data("bigassnum"),"123456789123456789123456789","Bad bigass number read from attribute"),strictEqual(y.data("badjson"),"{123}","Bad number read from attribute"),strictEqual(y.data("badjson2"),"[abc]","Bad number read from attribute"),strictEqual(y.data("empty"),"","Empty string read from attribute"),strictEqual(y.data("space")," ","Empty string read from attribute"),strictEqual(y.data("null"),null,"Primitive null read from attribute"),strictEqual(y.data("string"),"test","Typical string read from attribute"),y.remove(),o="<ol><li class='test test2' data-foo='bar' data-bar='baz' data-arr='[1,2]'>Some stuff</li><li class='test test2' data-test='bar' data-bar='baz'>Some stuff</li><li class='test test2' data-zoooo='bar' data-bar='{\"test\":\"baz\"}'>Some stuff</li><li class='test test2' data-number=true data-stuff='[2,8]'>Some stuff</li></ol>",d=jQuery(o).appendTo("#qunit-fixture"),d.find("li").each(t),d.remove()}),test(".data(Object)",function(){expect(4);var t,a,e=jQuery("<div/>");e.data({test:"in",test2:"in2"}),equal(e.data("test"),"in","Verify setting an object in data"),equal(e.data("test2"),"in2","Verify setting an object in data"),t={test:"unset"},a=jQuery(t),a.data("test","unset"),a.data({test:"in",test2:"in2"}),equal(jQuery.data(t).test,"in","Verify setting an object on an object extends the data object"),equal(t.test2,void 0,"Verify setting an object on an object does not extend the object"),e.remove()}),test("jQuery.removeData",function(){expect(10);var t,a=jQuery("#foo")[0];jQuery.data(a,"test","testing"),jQuery.removeData(a,"test"),equal(jQuery.data(a,"test"),void 0,"Check removal of data"),jQuery.data(a,"test2","testing"),jQuery.removeData(a),ok(!jQuery.data(a,"test2"),"Make sure that the data property no longer exists."),ok(!a[jQuery.expando],"Make sure the expando no longer exists, as well."),jQuery.data(a,{test3:"testing",test4:"testing"}),jQuery.removeData(a,"test3 test4"),ok(!jQuery.data(a,"test3")||jQuery.data(a,"test4"),"Multiple delete with spaces."),jQuery.data(a,{test3:"testing",test4:"testing"}),jQuery.removeData(a,["test3","test4"]),ok(!jQuery.data(a,"test3")||jQuery.data(a,"test4"),"Multiple delete by array."),jQuery.data(a,{"test3 test4":"testing",test3:"testing"}),jQuery.removeData(a,"test3 test4"),ok(!jQuery.data(a,"test3 test4"),"Multiple delete with spaces deleted key with exact name"),ok(jQuery.data(a,"test3"),"Left the partial matched key alone"),t={},jQuery.data(t,"test","testing"),equal(jQuery(t).data("test"),"testing","verify data on plain object"),jQuery.removeData(t,"test"),equal(jQuery.data(t,"test"),void 0,"Check removal of data on plain object"),jQuery.data(window,"BAD",!0),jQuery.removeData(window,"BAD"),ok(!jQuery.data(window,"BAD"),"Make sure that the value was not still set.")}),test(".removeData()",function(){expect(6);var t=jQuery("#foo");t.data("test","testing"),t.removeData("test"),equal(t.data("test"),void 0,"Check removal of data"),t.data("test","testing"),t.data("test.foo","testing2"),t.removeData("test.bar"),equal(t.data("test.foo"),"testing2","Make sure data is intact"),equal(t.data("test"),"testing","Make sure data is intact"),t.removeData("test"),equal(t.data("test.foo"),"testing2","Make sure data is intact"),equal(t.data("test"),void 0,"Make sure data is intact"),t.removeData("test.foo"),equal(t.data("test.foo"),void 0,"Make sure data is intact")}),window.JSON&&window.JSON.stringify&&test("JSON serialization (#8108)",function(){expect(1);var t={foo:"bar"};jQuery.data(t,"hidden",!0),equal(JSON.stringify(t),'{"foo":"bar"}',"Expando is hidden from JSON.stringify")}),test("jQuery.data should follow html5 specification regarding camel casing",function(){expect(10);var t=jQuery("<div id='myObject' data-w-t-f='ftw' data-big-a-little-a='bouncing-b' data-foo='a' data-foo-bar='b' data-foo-bar-baz='c'></div>").prependTo("body");equal(t.data().wTF,"ftw","Verify single letter data-* key"),equal(t.data().bigALittleA,"bouncing-b","Verify single letter mixed data-* key"),equal(t.data().foo,"a","Verify single word data-* key"),equal(t.data().fooBar,"b","Verify multiple word data-* key"),equal(t.data().fooBarBaz,"c","Verify multiple word data-* key"),equal(t.data("foo"),"a","Verify single word data-* key"),equal(t.data("fooBar"),"b","Verify multiple word data-* key"),equal(t.data("fooBarBaz"),"c","Verify multiple word data-* key"),t.data("foo-bar","d"),equal(t.data("fooBar"),"d","Verify updated data-* key"),equal(t.data("foo-bar"),"d","Verify updated data-* key"),t.remove()}),test("jQuery.data should not miss data with preset hyphenated property names",function(){expect(2);var t=jQuery("<div/>",{id:"hyphened"}).appendTo("#qunit-fixture"),a={camelBar:"camelBar","hyphen-foo":"hyphen-foo"};t.data(a),jQuery.each(a,function(a,e){equal(t.data(e),e,"data with property '"+e+"' was correctly found")})}),test("jQuery.data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values",function(){var t=jQuery("<div/>",{id:"hyphened"}).appendTo("#qunit-fixture"),a={"non-empty":"a string","empty-string":"","one-value":1,"zero-value":0,"an-array":[],"an-object":{},"bool-true":!0,"bool-false":!1,"some-json":'{ "foo": "bar" }',"num-1-middle":!0,"num-end-2":!0,"2-num-start":!0};expect(24),jQuery.each(a,function(a,e){t.data(a,e),deepEqual(t.data(a),e,"get: "+a),deepEqual(t.data(jQuery.camelCase(a)),e,"get: "+jQuery.camelCase(a))})}),test("jQuery.data supports interoperable removal of hyphenated/camelCase properties",function(){var t=jQuery("<div/>",{id:"hyphened"}).appendTo("#qunit-fixture"),a={"non-empty":"a string","empty-string":"","one-value":1,"zero-value":0,"an-array":[],"an-object":{},"bool-true":!0,"bool-false":!1,"some-json":'{ "foo": "bar" }'};expect(27),jQuery.each(a,function(a,e){t.data(a,e),deepEqual(t.data(a),e,"get: "+a),deepEqual(t.data(jQuery.camelCase(a)),e,"get: "+jQuery.camelCase(a)),t.removeData(a),equal(t.data(a),void 0,"get: "+a)})}),test(".removeData supports removal of hyphenated properties via array (#12786)",function(){expect(4);var t,a,e;t=jQuery("<div>").appendTo("#qunit-fixture"),a=jQuery({}),e={"a-a":1,bB:1},t.data({"a-a":1}).data("b-b",1),a.data({"a-a":1}).data("b-b",1),deepEqual(t.data(),e,"Data appears as expected. (div)"),deepEqual(a.data(),e,"Data appears as expected. (plain)"),t.removeData(["a-a","b-b"]),a.removeData(["a-a","b-b"]),deepEqual(t.data(),{},"Data is empty. (div)"),deepEqual(a.data(),{},"Data is empty. (plain)")}),test("Triggering the removeData should not throw exceptions. (#10080)",function(){expect(1),stop();var t=jQuery("#loadediframe");jQuery(t[0].contentWindow).on("unload",function(){ok(!0,"called unload"),start()}),t.attr("src","data/iframe.html?param=true")}),test("Only check element attributes once when calling .data() - #8909",function(){expect(2);var t={test:"testing",test2:"testing"},a=jQuery("<div data-test='testing'>"),e=a[0];e.setAttribute("data-test2","testing"),deepEqual(a.data(),t,"Sanity Check"),e.setAttribute("data-test3","testing"),deepEqual(a.data(),t,"The data didn't change even though the data-* attrs did"),a.remove()}),test("JSON data- attributes can have newlines",function(){expect(1);var t=jQuery('<div data-some=\'{\n"foo":\n	"bar"\n}\'></div>');equal(t.data("some").foo,"bar","got a JSON data- attribute with spaces"),t.remove()});